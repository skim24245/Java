package kr.ac.kopo.day05;

public class class01 {
/*
 * 뭔가 절차를 가지고 1번 2번 3번처럼 코드를 가지고 
 * 눈에 보이는 사물들을 하나의 객체로 만들고 싶음 = 객체와 객체와 상호 대화를 해서 어떤 결과물을 도출하는것
 * 객체를 추상화 시키는 것 =눈에 보이는 사물들의 모든 특징과 행위를 모두 객체로 할 필요는 없고 "필요로 하는 것들"
 * 눈에 보이는 사물들을 어떻게 추상화시켜서 표현할 것인지 = 객체지향에서 중요한 기능 
 * 눈에 보이는 사물들(명사, 동사 ex. 시동 끈다. 올린다 등등 ) 추상화 시킬 단위들 = 클래스 
 * 클래스 = > 붕어빵 툴 
 * 타이어가 몇번 고장났는 지 
 * 어떤 객체를 추상화시키는 지에 따라 객체지향에서 가장 중요
 * 추상화 시킨다 = 눈에 보이는 사물들의 특징을 어떻게 추상화 시킬건지에 따라 "객체의 특징과 동작"들의 특징을 명시화할 수 있다.
 * 특징들은 변수화시키고 동작들은 메소드화 시킨다.
 * 캡슐화 상속 추상화 다형성 = 올바른 객체 지향 방법 (하나의 클래스를 만들 때 고양이도 있고 강아지도 있고) 단, 고양이는 고양이대로 강아지는 강아지대로 사물을 만드는 단위가 좁을수록 좋다.
 * 클래스를 만드는 단위가 조그만해야 한다. 
 * 클래스라는 설계도를 이용해서 만든 것 = 객체
 * 메소드 안에 정의된 변수 : 지역변수 
 * 메소드 안에 정의된게 아니라 클래스 안에 정의된 변수 : 멤버변수 
 * 객체를 생성해야 메모리의 공간이 할당된다.
 * 클래스는 참조자료형! 참조자료형의 저장은 new를 통해 heap에 저장이 됌. new를 써야지만 메모리의 공간이 할당된다. 객체를 생성하려면 new를 써줘야 함. 설계를 하고 나서 객체를 메모리상에 올려야 한다.
 * 정리: 설계를 하고 객체를 메모리상에 올린다 -> 객체를 생성 -> 객체를 이용해서 동작(메소드)를 실행하거나 제어를 해준다. 
 * 따라서 클래스를 설계를 먼저 하고, 설계된 클래스를 이용해서 객체를 생성해야 한다.
 * new에서 만들어진 객체를 인스턴스 객체라고 한다. 
 * instance 객체를 만든다는 것 = new 한다는 것. 
 * 눈에 보이는 사물들을 추상화 시키려면 클래스를 만들어야 함. 
 * 클래스를 만들어주는 문법은 
}클래스 => 눈에 보이는 사물이나 속성. 기능. 정의
